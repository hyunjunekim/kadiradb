// Code generated by protoc-gen-go.
// source: protocol.proto
// DO NOT EDIT!

/*
Package kmdb is a generated protocol buffer package.

It is generated from these files:
	protocol.proto

It has these top-level messages:
	InfoReq
	InfoRes
	DBInfo
	OpenReq
	OpenRes
	PutReq
	PutReqBatch
	PutRes
	PutResBatch
	IncReq
	IncReqBatch
	IncRes
	IncResBatch
	GetReq
	GetReqBatch
	GetRes
	GetResBatch
	ResSeries
	ResPoint
*/
package kmdb

import proto "github.com/golang/protobuf/proto"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal

type InfoReq struct {
}

func (m *InfoReq) Reset()         { *m = InfoReq{} }
func (m *InfoReq) String() string { return proto.CompactTextString(m) }
func (*InfoReq) ProtoMessage()    {}

type InfoRes struct {
	Databases []*DBInfo `protobuf:"bytes,1,rep,name=databases" json:"databases,omitempty"`
}

func (m *InfoRes) Reset()         { *m = InfoRes{} }
func (m *InfoRes) String() string { return proto.CompactTextString(m) }
func (*InfoRes) ProtoMessage()    {}

func (m *InfoRes) GetDatabases() []*DBInfo {
	if m != nil {
		return m.Databases
	}
	return nil
}

type DBInfo struct {
	Name       string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Resolution int64  `protobuf:"varint,2,opt,name=resolution" json:"resolution,omitempty"`
}

func (m *DBInfo) Reset()         { *m = DBInfo{} }
func (m *DBInfo) String() string { return proto.CompactTextString(m) }
func (*DBInfo) ProtoMessage()    {}

type OpenReq struct {
	Name          string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Resolution    int64  `protobuf:"varint,2,opt,name=resolution" json:"resolution,omitempty"`
	EpochDuration int64  `protobuf:"varint,4,opt,name=epochDuration" json:"epochDuration,omitempty"`
	PayloadSize   int64  `protobuf:"varint,5,opt,name=payloadSize" json:"payloadSize,omitempty"`
	SegmentLength int64  `protobuf:"varint,6,opt,name=segmentLength" json:"segmentLength,omitempty"`
	MaxROEpochs   int64  `protobuf:"varint,7,opt,name=maxROEpochs" json:"maxROEpochs,omitempty"`
	MaxRWEpochs   int64  `protobuf:"varint,8,opt,name=maxRWEpochs" json:"maxRWEpochs,omitempty"`
}

func (m *OpenReq) Reset()         { *m = OpenReq{} }
func (m *OpenReq) String() string { return proto.CompactTextString(m) }
func (*OpenReq) ProtoMessage()    {}

type OpenRes struct {
}

func (m *OpenRes) Reset()         { *m = OpenRes{} }
func (m *OpenRes) String() string { return proto.CompactTextString(m) }
func (*OpenRes) ProtoMessage()    {}

type PutReq struct {
	Database  string   `protobuf:"bytes,1,opt,name=database" json:"database,omitempty"`
	Timestamp int64    `protobuf:"varint,2,opt,name=timestamp" json:"timestamp,omitempty"`
	Value     float64  `protobuf:"fixed64,3,opt,name=value" json:"value,omitempty"`
	Count     int64    `protobuf:"varint,4,opt,name=count" json:"count,omitempty"`
	Fields    []string `protobuf:"bytes,5,rep,name=fields" json:"fields,omitempty"`
}

func (m *PutReq) Reset()         { *m = PutReq{} }
func (m *PutReq) String() string { return proto.CompactTextString(m) }
func (*PutReq) ProtoMessage()    {}

type PutReqBatch struct {
	Batch []*PutReq `protobuf:"bytes,1,rep,name=batch" json:"batch,omitempty"`
}

func (m *PutReqBatch) Reset()         { *m = PutReqBatch{} }
func (m *PutReqBatch) String() string { return proto.CompactTextString(m) }
func (*PutReqBatch) ProtoMessage()    {}

func (m *PutReqBatch) GetBatch() []*PutReq {
	if m != nil {
		return m.Batch
	}
	return nil
}

type PutRes struct {
}

func (m *PutRes) Reset()         { *m = PutRes{} }
func (m *PutRes) String() string { return proto.CompactTextString(m) }
func (*PutRes) ProtoMessage()    {}

type PutResBatch struct {
	Batch []*PutRes `protobuf:"bytes,1,rep,name=batch" json:"batch,omitempty"`
}

func (m *PutResBatch) Reset()         { *m = PutResBatch{} }
func (m *PutResBatch) String() string { return proto.CompactTextString(m) }
func (*PutResBatch) ProtoMessage()    {}

func (m *PutResBatch) GetBatch() []*PutRes {
	if m != nil {
		return m.Batch
	}
	return nil
}

type IncReq struct {
	Database  string   `protobuf:"bytes,1,opt,name=database" json:"database,omitempty"`
	Timestamp int64    `protobuf:"varint,2,opt,name=timestamp" json:"timestamp,omitempty"`
	Value     float64  `protobuf:"fixed64,3,opt,name=value" json:"value,omitempty"`
	Count     int64    `protobuf:"varint,4,opt,name=count" json:"count,omitempty"`
	Fields    []string `protobuf:"bytes,5,rep,name=fields" json:"fields,omitempty"`
}

func (m *IncReq) Reset()         { *m = IncReq{} }
func (m *IncReq) String() string { return proto.CompactTextString(m) }
func (*IncReq) ProtoMessage()    {}

type IncReqBatch struct {
	Batch []*IncReq `protobuf:"bytes,1,rep,name=batch" json:"batch,omitempty"`
}

func (m *IncReqBatch) Reset()         { *m = IncReqBatch{} }
func (m *IncReqBatch) String() string { return proto.CompactTextString(m) }
func (*IncReqBatch) ProtoMessage()    {}

func (m *IncReqBatch) GetBatch() []*IncReq {
	if m != nil {
		return m.Batch
	}
	return nil
}

type IncRes struct {
}

func (m *IncRes) Reset()         { *m = IncRes{} }
func (m *IncRes) String() string { return proto.CompactTextString(m) }
func (*IncRes) ProtoMessage()    {}

type IncResBatch struct {
	Batch []*IncRes `protobuf:"bytes,1,rep,name=batch" json:"batch,omitempty"`
}

func (m *IncResBatch) Reset()         { *m = IncResBatch{} }
func (m *IncResBatch) String() string { return proto.CompactTextString(m) }
func (*IncResBatch) ProtoMessage()    {}

func (m *IncResBatch) GetBatch() []*IncRes {
	if m != nil {
		return m.Batch
	}
	return nil
}

type GetReq struct {
	Database  string   `protobuf:"bytes,1,opt,name=database" json:"database,omitempty"`
	StartTime int64    `protobuf:"varint,2,opt,name=startTime" json:"startTime,omitempty"`
	EndTime   int64    `protobuf:"varint,3,opt,name=endTime" json:"endTime,omitempty"`
	Fields    []string `protobuf:"bytes,4,rep,name=fields" json:"fields,omitempty"`
	GroupBy   []bool   `protobuf:"varint,5,rep,packed,name=groupBy" json:"groupBy,omitempty"`
}

func (m *GetReq) Reset()         { *m = GetReq{} }
func (m *GetReq) String() string { return proto.CompactTextString(m) }
func (*GetReq) ProtoMessage()    {}

type GetReqBatch struct {
	Batch []*GetReq `protobuf:"bytes,1,rep,name=batch" json:"batch,omitempty"`
}

func (m *GetReqBatch) Reset()         { *m = GetReqBatch{} }
func (m *GetReqBatch) String() string { return proto.CompactTextString(m) }
func (*GetReqBatch) ProtoMessage()    {}

func (m *GetReqBatch) GetBatch() []*GetReq {
	if m != nil {
		return m.Batch
	}
	return nil
}

type GetRes struct {
	Data []*ResSeries `protobuf:"bytes,2,rep,name=data" json:"data,omitempty"`
}

func (m *GetRes) Reset()         { *m = GetRes{} }
func (m *GetRes) String() string { return proto.CompactTextString(m) }
func (*GetRes) ProtoMessage()    {}

func (m *GetRes) GetData() []*ResSeries {
	if m != nil {
		return m.Data
	}
	return nil
}

type GetResBatch struct {
	Batch []*GetRes `protobuf:"bytes,1,rep,name=batch" json:"batch,omitempty"`
}

func (m *GetResBatch) Reset()         { *m = GetResBatch{} }
func (m *GetResBatch) String() string { return proto.CompactTextString(m) }
func (*GetResBatch) ProtoMessage()    {}

func (m *GetResBatch) GetBatch() []*GetRes {
	if m != nil {
		return m.Batch
	}
	return nil
}

type ResSeries struct {
	Fields []string    `protobuf:"bytes,1,rep,name=fields" json:"fields,omitempty"`
	Points []*ResPoint `protobuf:"bytes,2,rep,name=points" json:"points,omitempty"`
}

func (m *ResSeries) Reset()         { *m = ResSeries{} }
func (m *ResSeries) String() string { return proto.CompactTextString(m) }
func (*ResSeries) ProtoMessage()    {}

func (m *ResSeries) GetPoints() []*ResPoint {
	if m != nil {
		return m.Points
	}
	return nil
}

type ResPoint struct {
	Value float64 `protobuf:"fixed64,1,opt,name=value" json:"value,omitempty"`
	Count int64   `protobuf:"varint,2,opt,name=count" json:"count,omitempty"`
}

func (m *ResPoint) Reset()         { *m = ResPoint{} }
func (m *ResPoint) String() string { return proto.CompactTextString(m) }
func (*ResPoint) ProtoMessage()    {}
